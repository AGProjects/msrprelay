#!/usr/bin/env python

from signal import SIGHUP

if __name__ == '__main__':
    import sys
    from optparse import OptionParser
    from application.process import process, ProcessError
    from application import log

    import msrp

    name = 'msrprelay'
    fullname = 'MSRP Relay'
    description = 'An open source MSRP Relay'

    config_directory = '/etc/msrprelay'
    runtime_directory = '/var/run'
    default_pid = "%s/%s.pid" % (runtime_directory, name)

    parser = OptionParser(version="%%prog %s" % msrp.__version__)
    parser.add_option("--no-fork", action="store_false", dest="fork", default=1,
                      help="run the process in the foreground (for debugging)")
    parser.add_option("--pid", dest="pidFile", default=default_pid,
                      help="pid file (%s)" % default_pid,
                      metavar="File")

    (options, args) = parser.parse_args()

    pidFile = options.pidFile

    process._system_config_directory = config_directory
    try:
        process.runtime_directory = runtime_directory
    except ProcessError, e:
        log.msg("Fatal error: %s" % e)
        sys.exit(1)

    if options.fork:
        try:
            process.daemonize(pidFile)
        except ProcessError, e:
            log.fatal(str(e))
            sys.exit(1)
        log.startSyslog(name)
    else:
        pass
        #from application.debug.memory import *

    print "Starting %s %s" % (fullname, msrp.__version__)

    from msrp.relay import Relay
    try:
        server = Relay()
    except Exception, why:
        print >>sys.stderr, "Failed to create MSRP Relay: %s" % why
        sys.exit(1)

    process.signals.add_handler(SIGHUP, lambda signum, frame: server.reload())

    try:
        server.run()
    except Exception, why:
        print >>sys.stderr, "Failed to start MSRP Relay: %s" % why
        sys.exit(1)
